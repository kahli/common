<?php

use Drupal\Core\Database\Database;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;

function identity_schema() {
  $schema['identity_acquisition'] = [
    'description' => 'Identity Acquisition Storage',
    'fields' => [
      'acquisition_id' => [
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 128,
        'description' => 'The acquisition id',
      ],
      'user' => [
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ],
      'requested' => [
        'description' => 'The date requested.',
        'type' => 'varchar',
        'length' => 20,
      ],
      'started' => [
        'description' => 'The date started.',
        'type' => 'varchar',
        'length' => 20,
      ],
      'completed' => [
        'description' => 'The date completed.',
        'type' => 'varchar',
        'length' => 20,
      ],
      'identity' => [
        'description' => 'The resultant identity',
        'type' => 'int',
        'unsigned' => TRUE,
      ],
      'method' => [
        'description' => 'The acquisition method',
        'type' => 'int',
        'unsigned' => TRUE,
      ],
      'data' => [
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
      ],
    ],
    'primary key' => ['acquisition_id'],
    'indexes' => [
      'user' => ['user'],
      'identity' => ['identity'],
    ],
  ];

  return $schema;
}

/**
 * Install works at relationship.
 */
function identity_update_8001() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type = $entity_type_manager->getDefinition('identity_data');

  $bundle_handler = $entity_type_manager->getHandler($entity_type->id(), 'bundle_plugin');
  $entity_bundle_listener = \Drupal::service('entity_bundle.listener');
  $field_storage_definition_listener = \Drupal::service('field_storage_definition.listener');
  $field_definition_listener = \Drupal::service('field_definition.listener');

  foreach (['works_at'] as $bundle) {
    $entity_bundle_listener->onBundleCreate($bundle, $entity_type->id());
    foreach ($bundle_handler->getFieldDefinitions($bundle) as $definition) {
      $field_storage_definition_listener->onFieldStorageDefinitionCreate($definition);
      $field_definition_listener->onFieldDefinitionCreate($definition);
    }
  }
}

/**
 * Install organization name data.
 */
function identity_update_8002() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type = $entity_type_manager->getDefinition('identity_data');

  $bundle_handler = $entity_type_manager->getHandler($entity_type->id(), 'bundle_plugin');
  $entity_bundle_listener = \Drupal::service('entity_bundle.listener');
  $field_storage_definition_listener = \Drupal::service('field_storage_definition.listener');
  $field_definition_listener = \Drupal::service('field_definition.listener');

  foreach (['organization_name'] as $bundle) {
    $entity_bundle_listener->onBundleCreate($bundle, $entity_type->id());
    foreach ($bundle_handler->getFieldDefinitions($bundle) as $definition) {
      $field_storage_definition_listener->onFieldStorageDefinitionCreate($definition);
      $field_definition_listener->onFieldDefinitionCreate($definition);
    }
  }
}

/**
 * Install organization name data fields.
 */
function identity_update_8003() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type = $entity_type_manager->getDefinition('identity_data');

  $bundle_handler = $entity_type_manager->getHandler($entity_type->id(), 'bundle_plugin');
  $entity_bundle_listener = \Drupal::service('entity_bundle.listener');
  $field_storage_definition_listener = \Drupal::service('field_storage_definition.listener');
  $field_definition_listener = \Drupal::service('field_definition.listener');

  foreach (['organization_name'] as $bundle) {
    $entity_bundle_listener->onBundleCreate($bundle, $entity_type->id());
    foreach ($bundle_handler->getFieldDefinitions($bundle) as $definition) {
      $field_storage_definition_listener->onFieldStorageDefinitionCreate($definition);
      $field_definition_listener->onFieldDefinitionCreate($definition);
    }
  }
}

/**
 * Install role data class.
 */
function identity_update_8005() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type = $entity_type_manager->getDefinition('identity_data');

  $bundle_handler = $entity_type_manager->getHandler($entity_type->id(), 'bundle_plugin');
  $entity_bundle_listener = \Drupal::service('entity_bundle.listener');
  $field_storage_definition_listener = \Drupal::service('field_storage_definition.listener');
  $field_definition_listener = \Drupal::service('field_definition.listener');

  foreach (['role'] as $bundle) {
    $entity_bundle_listener->onBundleCreate($bundle, $entity_type->id());
    foreach ($bundle_handler->getFieldDefinitions($bundle) as $definition) {
      $field_storage_definition_listener->onFieldStorageDefinitionCreate($definition);
      $field_definition_listener->onFieldDefinitionCreate($definition);
    }
  }
}

/**
 * Install the merged_into field.
 */
function identity_update_8006() {
  $updater = \Drupal::entityDefinitionUpdateManager();
  $updater->installFieldStorageDefinition(
    'merged_into',
    'identity',
    'identity',
    BaseFieldDefinition::create('entity_reference')
      ->setSetting('target_type', 'identity')
      ->setLabel(t('Merged Into'))
      ->setDescription(new TranslatableMarkup('Which identity has this been merged into.'))
      ->setDisplayConfigurable('view', TRUE)
  );
}

/**
 * Install the identity_acquisition table.
 */
function identity_update_8007() {
  Database::getConnection()->schema()->createTable('identity_acquisition', [
    'description' => 'Identity Acquisition Storage',
    'fields' => [
      'acquisition_id' => [
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 128,
        'description' => 'The acquisition id',
      ],
      'user' => [
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ],
      'requested' => [
        'description' => 'The date requested.',
        'type' => 'varchar',
        'length' => 20,
      ],
      'started' => [
        'description' => 'The date started.',
        'type' => 'varchar',
        'length' => 20,
      ],
      'completed' => [
        'description' => 'The date completed.',
        'type' => 'varchar',
        'length' => 20,
      ],
      'identity' => [
        'description' => 'The resultant identity',
        'type' => 'int',
        'unsigned' => TRUE,
      ],
      'method' => [
        'description' => 'The acquisition method',
        'type' => 'int',
        'unsigned' => TRUE,
      ],
      'data' => [
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
      ],
    ],
    'primary key' => ['acquisition_id'],
    'indexes' => [
      'user' => ['user'],
      'identity' => ['identity'],
    ],
  ]);
}
